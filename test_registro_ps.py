"""
Script de validaci√≥n del formulario de registro de PS
Verifica que el formulario est√© actualizando correctamente la base de datos
"""

import sys
import os
import requests
import json
from datetime import datetime

# Agregar el directorio src al path para importar modelos
sys.path.append(os.path.join(os.path.dirname(__file__), "src"))

def test_formulario_registro():
    """Prueba el formulario de registro de PS"""
    
    print("üß™ Iniciando pruebas del formulario de registro PS")
    print("=" * 50)
    
    # URL base de la aplicaci√≥n
    base_url = "http://localhost:3000"
    
    # 1. Verificar que la aplicaci√≥n est√© ejecut√°ndose
    try:
        response = requests.get(f"{base_url}/milotalent")
        if response.status_code == 200:
            print("‚úÖ Aplicaci√≥n MiloTalent accesible")
        else:
            print(f"‚ùå Error de acceso: {response.status_code}")
            return False
    except requests.exceptions.ConnectionError:
        print("‚ùå No se puede conectar a la aplicaci√≥n")
        print("   Aseg√∫rate de que la aplicaci√≥n est√© ejecut√°ndose en http://localhost:3000")
        return False
    
    # 2. Verificar acceso al formulario (requiere autenticaci√≥n)
    print("\nüìã Verificando acceso al formulario...")
    try:
        form_response = requests.get(f"{base_url}/milotalent/registro")
        if form_response.status_code == 401 or "login" in form_response.url.lower():
            print("‚ö†Ô∏è  Formulario requiere autenticaci√≥n (esto es correcto por seguridad)")
        elif form_response.status_code == 200:
            print("‚úÖ Formulario accesible")
        else:
            print(f"‚ùå Error al acceder al formulario: {form_response.status_code}")
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
    
    return True

def verificar_base_datos():
    """Verifica la estructura de la base de datos"""
    
    print("\nüóÑÔ∏è  Verificando estructura de base de datos...")
    
    try:
        # Importar modelos y configuraci√≥n de la aplicaci√≥n
        from models import db
        from apps.milotalent.models import PrestadorServicio, AuditoriaPS
        from src.app import MiloAppsApp
        
        # Crear instancia de la aplicaci√≥n
        app_instance = MiloAppsApp()
        
        with app_instance.app.app_context():
            # Verificar que las tablas existan
            inspector = db.inspect(db.engine)
            tables = inspector.get_table_names()
            
            if 'talent_prestadores' in tables:
                print("‚úÖ Tabla 'talent_prestadores' existe")
                
                # Contar registros existentes
                count = PrestadorServicio.query.count()
                print(f"üìä Registros actuales en la base: {count}")
                
                # Mostrar √∫ltimos 3 registros
                if count > 0:
                    print("\nüìù √öltimos registros:")
                    ultimos = PrestadorServicio.query.order_by(
                        PrestadorServicio.id_ps.desc()
                    ).limit(3).all()
                    
                    for ps in ultimos:
                        print(f"   ‚Ä¢ ID: {ps.id_ps[:8]}... | {ps.nombre_completo} | {ps.correo}")
                
            else:
                print("‚ùå Tabla 'talent_prestadores' no existe")
                print("   Ejecuta: python init_milotalent.py")
            
            if 'talent_auditoria' in tables:
                print("‚úÖ Tabla de auditor√≠a existe")
                audit_count = AuditoriaPS.query.count()
                print(f"üìä Registros de auditor√≠a: {audit_count}")
            else:
                print("‚ö†Ô∏è  Tabla de auditor√≠a no existe")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error al verificar base de datos: {e}")
        return False


def crear_registro_prueba():
    """Crea un registro de prueba directamente en la base de datos"""
    
    print("\nüß™ Creando registro de prueba...")
    
    try:
        from models import db
        from apps.milotalent.models import PrestadorServicio, AuditoriaPS, SectorExperiencia, ModalidadContrato
        from src.app import MiloAppsApp
        
        app_instance = MiloAppsApp()
        
        with app_instance.app.app_context():
            # Crear PS de prueba
            timestamp = datetime.now().strftime('%Y%m%d%H%M%S')
            
            ps_prueba = PrestadorServicio(
                cedula=f"TEST-{timestamp}",
                nombre_completo=f"Prestador Prueba {timestamp}",
                correo=f"prueba{timestamp}@miloapps.com",
                telefono="300-123-4567",
                perfil_profesional="Servicios de Prueba",
                sector_experiencia=SectorExperiencia.MIXTO,
                modalidad=ModalidadContrato.PS,
                dependencia_asignada="√Årea de Pruebas",
                objeto_contractual="Prueba de funcionalidad",
                actividades_especificas="Validar registro en base de datos"
            )
            
            # Guardar en base de datos
            db.session.add(ps_prueba)
            db.session.commit()
            
            print(f"‚úÖ Registro de prueba creado exitosamente")
            print(f"   ID: {ps_prueba.id_ps}")
            print(f"   Nombre: {ps_prueba.nombre_completo}")
            print(f"   Email: {ps_prueba.correo}")
            
            # Crear auditor√≠a
            auditoria = AuditoriaPS(
                ps_id=ps_prueba.id_ps,
                usuario_id="SYSTEM-TEST",
                accion="prueba_registro",
                modulo="test_script",
                descripcion=f"Registro de prueba autom√°tica: {ps_prueba.nombre_completo}",
                valores_nuevos=json.dumps({
                    "nombre_completo": ps_prueba.nombre_completo,
                    "correo": ps_prueba.correo,
                    "cedula": ps_prueba.cedula
                }),
                ip_usuario="127.0.0.1",
                user_agent="Test Script v1.0"
            )
            
            db.session.add(auditoria)
            db.session.commit()
            
            print("‚úÖ Auditor√≠a registrada correctamente")
            
            return True
            
    except Exception as e:
        print(f"‚ùå Error al crear registro de prueba: {e}")
        return False


def mostrar_instrucciones_prueba_manual():
    """Muestra instrucciones para prueba manual del formulario"""
    
    print("\n" + "=" * 60)
    print("üîß INSTRUCCIONES PARA PRUEBA MANUAL DEL FORMULARIO")
    print("=" * 60)
    
    print("\n1. üåê Abrir navegador y ir a: http://localhost:3000")
    print("2. üîë Iniciar sesi√≥n (si es requerido)")
    print("3. üìù Ir a: http://localhost:3000/milotalent/registro")
    print("4. ‚úçÔ∏è  Completar el formulario con datos de prueba:")
    print("   ‚Ä¢ Nombre: Juan")
    print("   ‚Ä¢ Apellido: P√©rez")
    print("   ‚Ä¢ Email: juan.perez@test.com")
    print("   ‚Ä¢ Tel√©fono: 300-123-4567")
    print("   ‚Ä¢ Servicios: Seleccionar al menos uno")
    print("5. üíæ Hacer clic en 'Registrar'")
    print("6. ‚úÖ Verificar mensaje de √©xito")
    print("7. üîç Ejecutar este script nuevamente para verificar que se guard√≥")
    
    print("\n" + "=" * 60)


if __name__ == "__main__":
    print("üöÄ Sistema de Validaci√≥n - Formulario Registro PS")
    print("MiloApps v1.0")
    print("=" * 60)
    
    # Ejecutar pruebas
    app_ok = test_formulario_registro()
    
    if app_ok:
        db_ok = verificar_base_datos()
        
        if db_ok:
            # Crear registro de prueba
            test_ok = crear_registro_prueba()
            
            if test_ok:
                print("\nüéâ TODAS LAS PRUEBAS EXITOSAS")
                print("‚úÖ El formulario est√° configurado correctamente")
                print("‚úÖ La base de datos est√° funcionando")
                print("‚úÖ Los registros se est√°n guardando correctamente")
            else:
                print("\n‚ö†Ô∏è  Problema con la creaci√≥n de registros")
        else:
            print("\n‚ùå Problema con la base de datos")
    else:
        print("\n‚ùå Problema con la aplicaci√≥n")
    
    # Mostrar instrucciones para prueba manual
    mostrar_instrucciones_prueba_manual()
    
    print("\nüìã RESUMEN DE VALIDACI√ìN COMPLETADO")